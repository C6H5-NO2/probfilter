import probfilter.verifx.lemma.CvRDT


trait CvRDTProof[T <: CvRDT[T]] {
  proof isMonotonicSemilattice {
    forall (x: T, y: T, m2: T) {
      (x.reachable() && y.reachable() && x.compatible(y)) =>: {
        val lub = x.merge(y)
        lub.reachable() &&
          x.compare(lub) && y.compare(lub) &&
          // Equivalent to `!exists (m2: T) { m2.reachable() && m2.compare(lub) && !lub.compare(m2) && x.compare(m2) && y.compare(m2) }`.
          // However, `m2` is moved to the top level so that it is included in `counterExample` when the proof is rejected.
          ((m2.reachable() && x.compare(m2) && y.compare(m2)) =>: lub.compare(m2))
      }
    }
  }
}
